ðŸ¤” Middlewares in Express

- Middleware works between the request and response cycle. 
- Middleware gets executed after the server receives the request and before the controller actions send the response.
- Middleware has the access to the request object, responses object, and next, it can process the request before the server send a response.
- An Express-based application is a series of middleware function calls.



		       |HTTP 				               HTTP     |
		       |Request 			               Response |
		Client |----------------Middleware------------------|
               |					                        |	
		       | 					                        |	
		       |					                        |		
							Middleware Working


ðŸ‘‰ Advantages of using middleware:

- Middleware can process request objects multiple times before the server works for that request.
- Middleware can be used to add logging and authentication functionality.
- Middleware improves client-side rendering performance.
- Middleware is used for setting some specific HTTP headers.
- Middleware helps for Optimization and better performance.


ðŸ‘‰ Middleware Chaining

- Middleware can be chained from one to another, Hence creating a chain of functions that are executed in order. 
- The last function sends the response back to the browser. So, before sending the response back to the browser the different middleware process the request.
- The next() function in the express is responsible for calling the next middleware function if there is one.


		    __________________Middleware Stack_________________				
	REQUEST ------------> 1 --------------> 2 ------> 3 ------> RESPONCE		
		    Body Parsing	 Authentication	   Router	


ðŸ‘‰ An Express application can use the following types of middleware

- Application-level middleware
- Router-level middleware
- Error-handling middleware
- Built-in middleware
  - express.static : serves static assets such as HTML files, images, and so on.
  - express.json : parses incoming requests with JSON payloads
  - express.urlencoded : parses incoming requests with URL-encoded payloads.
- Third-party middleware
  - body-parser : This is used to parse the body of requests which have payloads attached to them
  - cookie-parser : It parses Cookie header and populate req.cookies with an object keyed by cookie names.
  - express-session : It creates a session middleware with the given options. We will discuss its usage in the Sessions section.